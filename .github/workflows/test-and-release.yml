name: Test and Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3' # Adjust to your PHP version
        extensions: pdo, pdo_sqlite, pdo_mysql, pdo_pgsql
        coverage: none

    - name: Install dependencies
      run: composer install

    - name: Check PHP compatibility (version 8.0)
      run: composer phpcompatibility

    - name: Run tests
      run: composer test

  release:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Bump version and create release
      id: bump_version
      run: |
        # Extract the current version from composer.json
        CURRENT_VERSION=$(jq -r '.version' composer.json)
        echo "Current version: $CURRENT_VERSION"

        # Extract major, minor, and patch numbers
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

        # Increment the patch version
        PATCH=$((PATCH + 1))

        # Create the new version
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"

        # Update composer.json with the new version
        jq --arg version "$NEW_VERSION" '.version = $version' composer.json > composer.json.tmp && mv composer.json.tmp composer.json

        # Commit the version bump
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add composer.json
        git commit -m "Bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main --tags

        # Output the new version
        echo "::set-output name=version::$NEW_VERSION"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.create_release.outputs.version }}
        release_name: Release v${{ steps.create_release.outputs.version }}
        body: |
          Automated release for version ${{ steps.create_release.outputs.version }}.
        draft: false
        prerelease: false
      
    - name: Zip src folder
      run: zip -r src.zip src

    - name: Upload src folder
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./src.zip
        asset_name: src.zip
        asset_content_type: application/zip