<?php

use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Attributes\DataProvider;
use Ezydb\DAO\DAO;
use Ezydb\DAO\DAOException;

final class DAOTest extends TestCase
{
    private $testPdo;
    private $testDao;

    protected function setUp(): void
    {
        $this->testPdo = new PDO("sqlite::memory:");
        $this->testPdo->exec("
            DROP TABLE IF EXISTS testEntity
        ");
        $this->testPdo->exec("
            CREATE TABLE IF NOT EXISTS testEntity (
                id INTEGER PRIMARY KEY,
                columnone VARCHAR(255),
                columntwo INTEGER,
                columnthree DOUBLE PRECISION,
                active INTEGER DEFAULT 1
            )
        ");
        $this->testDao = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            [
                DAO::DEL_METHOD             => DAO::DEL_METHOD_DEACTIVATE,
                DAO::DEACTIVATE_COLUMN      => 'active',
                DAO::KEY                    => 'id',
                DAO::KEY_IS_AUTOGENERATED   => true
            ]
        );

    }

    public function testConstructor(): void
    {
        $this->assertInstanceOf(DAO::class, $this->testDao);
    }

    public function testConstructorErrorWhenIdIsEmpty(): void
    {
        $this->expectException(DAOException::class);
        $problematicDao1 = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            [
                DAO::KEY        => ''
            ]
        );
    }

    public function testConstructorErrorWhenIdIsNotInColumns(): void
    {
        $this->expectException(DAOException::class);
        $problematicDao1 = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            [
                DAO::KEY        => 'identifier'
            ]
        );
    }

    public function testConstructorErrorWithInvalidKeyIsAutogenerated(): void
    {
        $this->expectException(DAOException::class);
        $problematicDao1 = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            [
                DAO::KEY        => 'id',
                DAO::KEY_IS_AUTOGENERATED => 1
            ]
        );
    }

    public function testConstructorErrorWithInvalidDeleteMethod(): void
    {
        $this->expectException(DAOException::class);
        $problematicDao1 = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            [
                DAO::KEY        => 'id',
                DAO::DEL_METHOD => 'unrecognized-delete-method'
            ]
        );
    }

    public function testConstructorErrorWithInvalidDeactivateColumn(): void
    {
        $this->expectException(DAOException::class);
        $problematicDao1 = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            [
                DAO::KEY        => 'id',
                DAO::DEL_METHOD => DAO::DEL_METHOD_DEACTIVATE,
                DAO::DEACTIVATE_COLUMN => 'unrecognized-column'
            ]
        );
    }

    public function testConstructorErrorWithInvalidConfigurationFormat(): void
    {
        $this->expectException(DAOException::class);
        $problematicDao1 = new DAO(
            $this->testPdo,
            'testEntity',
            [
                'id'            => PDO::PARAM_INT,
                'columnone'     => PDO::PARAM_STR,
                'columntwo'     => PDO::PARAM_INT,
                'columnthree'   => PDO::PARAM_STR,
                'active'        => PDO::PARAM_INT
            ],
            new \StdClass()
        );
    }

    public static function countProvider(): array
    {
        return [
            'null filter' => [null, 4],
            'empty filter' => [[], 6],
            'equals to operator' => [[['property' => 'active', 'operator'=>'=', 'value' => 0]], 2],
            'diffrent from operator' => [[['property' => 'columnone', 'operator'=>'<>', 'value' => 'value3']], 5],
            'greater than operator' => [[['property' => 'columnthree', 'operator'=>'>', 'value' => 500]], 1],
            'less or equal than operator' => [[['property' => 'columnthree', 'operator'=>'<=', 'value' => 435.99]], 5],
            'like operator' => [[['property' => 'columnone', 'operator'=>'LIKE', 'value' => '%value%']], 6],
            'is null operator' => [[['property' => 'columntwo', 'operator'=>'IS NULL']], 2],
            'is not null operator' => [[['property' => 'columntwo', 'operator'=>'IS NOT NULL']], 4],
        ];
    }


    #[DataProvider('countProvider')]
    public function testCount($filters, $expectedResult): void
    {
        $this->testPdo->exec("DELETE FROM testEntity");
        $this->testPdo->exec("INSERT INTO testEntity 
                (columnone, columntwo, columnthree, active) VALUES
                ('value1', 01, '2.6', 1),
                ('value2', NULL, '0.0', 0),
                ('value3', 90, '999', 1),
                ('value4', NULL, '234', 0),
                ('value5', 23, '6.0', 1),
                ('value6', 12, '2.6', 1)
        ");
        $result = $this->testDao->count($filters);
        $this->assertEquals($expectedResult, $result);
    }

    public function testCountWithIllegalProperty(): void
    {
        $this->expectException(DAOException::class);
        $result = $this->testDao->count(['property'=>'columnnine','operator'=>'=','value'=>'2']);
    }

    public function testCountWithIllegalOperator(): void
    {
        $this->expectException(DAOException::class);
        $result = $this->testDao->count(['property'=>'columnone','operator'=>'OP','value'=>'2']);
    }

    public function testCountWithNoValueWhereItIsNeeded(): void
    {
        $this->expectException(DAOException::class);
        $result = $this->testDao->count(['property'=>'columnone','operator'=>'=']);
    }

    public function testCountEmptySet(): void
    {
        $expectedResult = 0;
        $result = $this->testDao->count();
        $this->assertEquals($expectedResult, $result);
    }

    public function testCreate(): void
    {
        $testEntity = [
            'columnone'=>'value1',
            'columntwo'=>42,
            'columnthree'=>null,
            'active'=>0
        ];
        $testEntity['id'] = $this->testDao->create($testEntity);
        $this->assertNotNull($testEntity['id']);
        $retrievedTestEntity = $this->testPdo->query("SELECT * FROM testEntity WHERE id = {$testEntity['id']}")->fetch(PDO::FETCH_ASSOC);
        $this->assertEquals($testEntity, $retrievedTestEntity);
    }

    public function testDel(): void
    {
        $testEntity = [
            'columnone'=>'value1',
            'columntwo'=>42,
            'columnthree'=>null,
            'active'=>0
        ];
        $testEntity['id'] = $this->testDao->create($testEntity);
        $retrievedTestEntity = $this->testPdo->query("SELECT * FROM testEntity WHERE id = {$testEntity['id']} AND active = '1'")->fetch(PDO::FETCH_ASSOC);
        $this->assertNotNull($retrievedTestEntity);
        $this->testDao->del($testEntity['id']);
        $retrievedTestEntity = $this->testPdo->query("SELECT * FROM testEntity WHERE id = {$testEntity['id']} AND active = '1'")->fetch(PDO::FETCH_ASSOC);
        $this->assertFalse($retrievedTestEntity);
    }

    public static function escProvider(): array
    {
        return [
            'single identifier' => ['identifier', '"identifier"'],
            'single asterisk' => ['*', '*'],
            'two identifiers' => ['identifier1.identifier2', '"identifier1"."identifier2"'],
            'three identifiers' => ['identifier1.identifier2.identifier3', '"identifier1"."identifier2"."identifier3"'],
            'identifier with asterisk' => ['identifier1.*', '"identifier1".*']
        ];
    }
    
    #[DataProvider('escProvider')]
    public function testEsc($input, $expectedResult): void
    {
        $result = $this->testDao->esc($input);
        $this->assertEquals($expectedResult, $result);
    }

    public static function existsProvider(): array
    {
        return [
            'something that exists' => [1, true],
            'something that does not exist' => [2, false]
        ];
    }

    #[DataProvider('existsProvider')]
    public function testExists($input, $expectedResult): void
    {
        $this->testPdo->exec("DELETE FROM testEntity");
        $this->testPdo->exec("INSERT INTO testEntity 
                (id, columnone, columntwo, columnthree, active) VALUES
                (1, 'value1', 01, '2.6', 1)
        ");
        $result = $this->testDao->exists($input);
        $this->assertEquals($expectedResult, $result);
    }

    public function testGet(): void
    {
        $testEntity = [
            'columnone'=>'value1',
            'columntwo'=>null,
            'columnthree'=>3.45,
            'active'=>1
        ];
        $testEntity['id'] = $this->testDao->create($testEntity);
        $result = $this->testDao->get($testEntity['id']);
        $expectedResult = $testEntity;
        $this->assertEquals($expectedResult, $result);
    }

    public static function listProvider(): array
    {
        return [
            'default, default, default' => [true, null, null, [
                1=>['id'=>1, 'columnone'=>'1abcd', 'columntwo'=>01, 'columnthree'=>'2.6', 'active'=>1],
                3=>['id'=>3, 'columnone'=>'efgh', 'columntwo'=>-10, 'columnthree'=>NULL, 'active'=>1],
                6=>['id'=>6, 'columnone'=>'ijkl2', 'columntwo'=>12, 'columnthree'=>'2.6', 'active'=>1],
            ]],
            'no keys, default, default' => [false, null, null, [
                ['id'=>1, 'columnone'=>'1abcd', 'columntwo'=>01, 'columnthree'=>'2.6', 'active'=>1],
                ['id'=>3, 'columnone'=>'efgh', 'columntwo'=>-10, 'columnthree'=>NULL, 'active'=>1],
                ['id'=>6, 'columnone'=>'ijkl2', 'columntwo'=>12, 'columnthree'=>'2.6', 'active'=>1],
            ]],
            'default, equality, default' => [true, [['property' => 'columnthree', 'operator'=>'=', 'value' => 2.6]], null, [
                1=>['id'=>1, 'columnone'=>'1abcd', 'columntwo'=>01, 'columnthree'=>'2.6', 'active'=>1],
                6=>['id'=>6, 'columnone'=>'ijkl2', 'columntwo'=>12, 'columnthree'=>'2.6', 'active'=>1],
            ]],
            'default, is null filter, id desc' => [true, [['property' => 'columntwo', 'operator'=>'IS NULL']], [['property' => 'id', 'direction'=>'desc']], [
                4=>['id'=>4, 'columnone'=>'efgh', 'columntwo'=>NULL, 'columnthree'=>234, 'active'=>0],
                2=>['id'=>2, 'columnone'=>'2abcd', 'columntwo'=>NULL, 'columnthree'=>0, 'active'=>0],
            ]],
            'no keys, is null filter, columnthree asc' => [false, [['property' => 'columntwo', 'operator'=>'IS NULL']], [['property' => 'columnthree', 'direction'=>'asc']], [
                ['id'=>2, 'columnone'=>'2abcd', 'columntwo'=>NULL, 'columnthree'=>0, 'active'=>0],
                ['id'=>4, 'columnone'=>'efgh', 'columntwo'=>NULL, 'columnthree'=>234, 'active'=>0],
            ]],
            'no keys, like + is not null filter, columnthree asc' => [false, [['property'=>'columnone', 'operator'=>'LIKE', 'value'=>'%abcd'],['property' => 'columntwo', 'operator'=>'IS NOT NULL']], [['property' => 'columnthree', 'direction'=>'asc']], [
                ['id'=>1, 'columnone'=>'1abcd', 'columntwo'=>01, 'columnthree'=>2.6, 'active'=>1],
            ]],
            'default, default, columnthree asc + columntwo desc' => [true, null, [['property' => 'columnthree', 'direction'=>'asc'],['property' => 'columntwo', 'direction'=>'desc']], [
                3=>['id'=>3, 'columnone'=>'efgh', 'columntwo'=>-10, 'columnthree'=>NULL, 'active'=>1],
                6=>['id'=>6, 'columnone'=>'ijkl2', 'columntwo'=>12, 'columnthree'=>'2.6', 'active'=>1],
                1=>['id'=>1, 'columnone'=>'1abcd', 'columntwo'=>01, 'columnthree'=>'2.6', 'active'=>1],
            ]],
            'no keys, greater than filter, default' => [false, [['property' => 'columntwo', 'operator'=>'>', 'value'=>12]], null, [
                ['id'=>5, 'columnone'=>'ijkl1', 'columntwo'=>723, 'columnthree'=>62.7, 'active'=>0],
            ]],
        ];
    }

    #[DataProvider('listProvider')]
    public function testList($elementKeyAsArrayKey, $filters, $orderBy, $expectedResult): void
    {
        $this->testPdo->exec("DELETE FROM testEntity");
        $this->testPdo->exec("INSERT INTO testEntity 
                (id, columnone, columntwo, columnthree, active) VALUES
                (1, '1abcd', 01, '2.6', 1),
                (2, '2abcd', NULL, '0.0', 0),
                (3, 'efgh', -10, NULL, 1),
                (4, 'efgh', NULL, '234', 0),
                (5, 'ijkl1', 723, '62.7', 0),
                (6, 'ijkl2', 12, '2.6', 1)
        ");
        $result = $this->testDao->list($elementKeyAsArrayKey, $filters, $orderBy);
        $this->assertEquals($expectedResult, $result);
    }

    public function testUpdate(): void
    {
        $this->testPdo->exec("DELETE FROM testEntity");
        $this->testPdo->exec("INSERT INTO testEntity 
                (id, columnone, columntwo, columnthree, active) VALUES
                (99, 'valuex', -234, 3.1415, 0)
        ");
        $updatedEntity = [
            'id' =>99, 'columnone'=>'valuey', 'columntwo'=>-987, 'columnthree'=>4, 'active'=>1
        ];
        $expectedResult = true;
        $result = $this->testDao->update($updatedEntity);
        $this->assertEquals($expectedResult, $result);
        $retrievedUpdatedEntity = $this->testDao->get($updatedEntity['id']);
        $this->assertEquals($updatedEntity, $retrievedUpdatedEntity );
    }

    public function testUpdateKey(): void
    {
        $oldId = 99;
        $newId = 100;
        $this->testPdo->exec("DELETE FROM testEntity");
        $this->testPdo->exec("INSERT INTO testEntity 
                (id, columnone, columntwo, columnthree, active) VALUES
                ($oldId, 'valuex', -234, 3.1415, 0)
        ");
        
        $expectedResult = true;
        $result = $this->testDao->updateKey(99, $newId);
        $this->assertEquals($expectedResult, $result);
        
        $expectedRetrievedEntity = [
            'id' =>$newId, 'columnone'=>'valuex', 'columntwo'=>-234, 'columnthree'=>3.1415, 'active'=>0
        ];
        $retrievedUpdatedEntity = $this->testDao->get($newId);
        $this->assertEquals($retrievedUpdatedEntity, $expectedRetrievedEntity);

        $retrievedError = $this->testDao->get($oldId);
        $this->assertNull($retrievedError);
    }
}